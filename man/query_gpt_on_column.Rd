% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query_gpt_on_column.R
\name{query_gpt_on_column}
\alias{query_gpt_on_column}
\title{Query GPT on a dataframe's column}
\usage{
query_gpt_on_column(
  db,
  text_column,
  sys_prompt = NULL,
  usr_prompt = NULL,
  model = "gpt-3.5-turbo",
  quiet = TRUE,
  max_try = 10,
  temperature = 0,
  max_tokens = NULL,
  endpoint = "https://api.openai.com/v1/chat/completions",
  include_source_text = TRUE,
  simplify = TRUE,
  na_if_error = FALSE
)
}
\arguments{
\item{db}{(data.frame) the data to use}

\item{text_column}{(chr) the name of the column containing the text
data}

\item{sys_prompt}{(chr) the system prompt to use}

\item{usr_prompt}{(chr) the user prompt to use}

\item{model}{(chr, default = "gpt-3.5-turbo") the model to use}

\item{quiet}{(lgl, default = TRUE) whether to print information}

\item{max_try}{(int, default = 10) the maximum number of tries}

\item{temperature}{(dbl, default = 0) the temperature to use}

\item{max_tokens}{(dbl, default = 1000) the maximum number of tokens}

\item{endpoint}{(chr, default =
"https://api.openai.com/v1/chat/completions", i.e. the OpenAI API)
the endpoint to use for the request.}

\item{include_source_text}{(lgl, default = TRUE) whether to include
the source text}

\item{simplify}{(lgl, default = TRUE) whether to simplify the output}

\item{na_if_error}{(lgl, default = FALSE) whether to return NA if an
error occurs}
}
\value{
(tibble) the result of the query
}
\description{
Query GPT on a dataframe's column
}
\examples{
if (FALSE) {

 db <- tibble(
   commenti = c(
     "Che barba, che noia!",
     "Un po' noioso, ma interessante",
     "Che bello, mi è piaciuto molto!"
   )
 )

 role <- "Sei l'assistente di un docente universitario."
 context <- "State analizzando i commenti degli studenti dell'ultimo corso."
 task <- "Il tuo compito è capire se sono soddisfatti del corso."
 instructions <- "Analizza i commenti e decidi se sono soddisfatti o meno."
 output <- "Riporta 'soddisfatto' o 'insoddisfatto'."
 style <- "Non aggiungere nessun commento, restituisci solo ed
   esclusivamente la classificazione."
 examples <- "
 commento_1: 'Mi è piaciuto molto il corso; davvero interessante.'
 classificazione_1: 'soddisfatto'
 commento_2: 'Non mi è piaciuto per niente; una noia mortale'
 classificazione_2: 'insoddisfatto'
 "

 sys_prompt <- compose_sys_prompt(role = role, context = context)
 usr_prompt <- compose_usr_prompt(
   task = task, instructions = instructions, output = output,
   style = style, examples = examples
 )
 res <- db |>
  query_gpt_on_column(
    "commenti", sys_prompt = sys_prompt, usr_prompt = usr_prompt
  )
 res
}
}
